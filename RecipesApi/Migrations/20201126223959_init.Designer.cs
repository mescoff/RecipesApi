// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipesApi;

namespace RecipesApi.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20201126223959_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("RecipesApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("RecipesApi.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeIng_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("Recipe_Id")
                        .HasColumnType("int");

                    b.Property<int>("Unit_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Recipe_Id");

                    b.HasIndex("Unit_Id");

                    b.ToTable("recipe_ingredients");
                });

            modelBuilder.Entity("RecipesApi.Models.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeInst_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.Property<int?>("RecipeMedia_Id")
                        .HasColumnType("int");

                    b.Property<int>("Recipe_Id")
                        .HasColumnType("int");

                    b.Property<int>("StepNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeMedia_Id");

                    b.HasIndex("Recipe_Id");

                    b.ToTable("recipe_instructions");
                });

            modelBuilder.Entity("RecipesApi.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeMedia_Id");

                    b.Property<string>("MediaPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<int>("Recipe_Id")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Recipe_Id");

                    b.ToTable("recipe_media");
                });

            modelBuilder.Entity("RecipesApi.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Recipe_Id");

                    b.Property<DateTime?>("AuditDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<string>("LastModifier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.Property<string>("OriginalLink")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.Property<string>("TitleLong")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("TitleShort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("RecipesApi.Models.RecipeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeCat_Id");

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int>("Recipe_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Recipe_Id");

                    b.ToTable("recipe_categories");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeInterval_Id");

                    b.Property<int>("IntervalLabel_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntervalLabel_Id");

                    b.ToTable("recipe_timeintervals");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeIntervalLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IntervalLabel_Id");

                    b.Property<string>("label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("timeinterval_labels");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeIntervalSpan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IntervalSpan_Id");

                    b.Property<int>("TimeInterval_Id")
                        .HasColumnType("int");

                    b.Property<string>("TimeUnit")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TimeValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeInterval_Id");

                    b.ToTable("recipe_timeintervalspans");
                });

            modelBuilder.Entity("RecipesApi.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Unit_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("units");
                });

            modelBuilder.Entity("RecipesApi.Models.Ingredient", b =>
                {
                    b.HasOne("RecipesApi.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("Recipe_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipesApi.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("Unit_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RecipesApi.Models.Instruction", b =>
                {
                    b.HasOne("RecipesApi.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("RecipeMedia_Id");

                    b.HasOne("RecipesApi.Models.Recipe", "Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("Recipe_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesApi.Models.Media", b =>
                {
                    b.HasOne("RecipesApi.Models.Recipe", "Recipe")
                        .WithMany("Media")
                        .HasForeignKey("Recipe_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesApi.Models.RecipeCategory", b =>
                {
                    b.HasOne("RecipesApi.Models.Category", "Category")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipesApi.Models.Recipe", "Recipe")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("Recipe_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeInterval", b =>
                {
                    b.HasOne("RecipesApi.Models.TimeIntervalLabel", "Label")
                        .WithMany()
                        .HasForeignKey("IntervalLabel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeIntervalSpan", b =>
                {
                    b.HasOne("RecipesApi.Models.TimeInterval", "TimeInterval")
                        .WithMany("TimeSpans")
                        .HasForeignKey("TimeInterval_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeInterval");
                });

            modelBuilder.Entity("RecipesApi.Models.Category", b =>
                {
                    b.Navigation("RecipeCategories");
                });

            modelBuilder.Entity("RecipesApi.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Media");

                    b.Navigation("RecipeCategories");
                });

            modelBuilder.Entity("RecipesApi.Models.TimeInterval", b =>
                {
                    b.Navigation("TimeSpans");
                });
#pragma warning restore 612, 618
        }
    }
}
